i <- 0
for (col in 1:length(MPF.Fidelity.BIAS.month[1,])) {
if (col != 1 && col != 4 && col != 5 && col != 6 && col != 9 && col != 11 && col != 12 && col != 14) {
if (!is.na(MPF.Fidelity.returns.mat[row, col]) &&
MPF.Fidelity.returns.mat[row, col] != 0) {
MPF.Fidelity.stock.mean <- MPF.Fidelity.stock.mean + MPF.Fidelity.returns.mat[row, col]
i <- i + 1
}
if (MPF.Fidelity.BIAS.month[row, col] < 1e-6) {
MPF.Fidelity.BIAS.month[row, col] <- 0
}
} else {
if (MPF.Fidelity.BIAS.month[row, col] < 0) {
MPF.Fidelity.BIAS.month[row, col] <- 0
}
}
# if (MPF.Fidelity.BIAS.month[row,col] < Min_NMMA){
#   MPF.Fidelity.BIAS.month[row,col] <- 0
# }
}
MPF.Fidelity.stock.return[row] <- MPF.Fidelity.stock.mean / i
if (is.nan(MPF.Fidelity.BIAS.month[row,col])) {
MPF.Fidelity.BIAS.month[row,col] <- 0
}
# Retain two most increasing fund
last <- length(MPF.Fidelity.BIAS.month[1,]) - top
order <- order(MPF.Fidelity.BIAS.month[row,])[1:last]
for (col in order) {
MPF.Fidelity.BIAS.month[row,col] <- 0
}
MPF.Fidelity.sum <- sum(MPF.Fidelity.BIAS.month[row,])
MPF.Fidelity.BIAS.p <- MPF.Fidelity.BIAS.month[row,]
MPF.Fidelity.BIAS.p[] <- 0
if (row > 8 && MPF.Fidelity.stock.return[row] <
quantile(na.omit(MPF.Fidelity.stock.return), c(.35)) &&
MPF.Fidelity.stock.return[row - 3] <
quantile(na.omit(MPF.Fidelity.stock.return), c(.45))) {
up <- FALSE
}
if (row > 8 && hedge &&
MPF.Fidelity.stock.return[row] >
quantile(na.omit(MPF.Fidelity.stock.return), c(.45))  &&
MPF.Fidelity.stock.return[row - 3] >
quantile(na.omit(MPF.Fidelity.stock.return), c(.35))) {
hedge <- FALSE
up <- TRUE
}
if (row > 8 &&  (MPF.Fidelity.stock.return[row] < 0 &&
MPF.Fidelity.stock.return[row-1] >
quantile(na.omit(MPF.Fidelity.stock.return), c(.85)))) {
hedge <- TRUE
}
MPF.Fidelity.sum <- sum(MPF.Fidelity.BIAS.month[row, ])
MPF.Fidelity.BIAS.p[] <- 0
if (row <= 12 || MPF.Fidelity.sum == MPF.Fidelity.BIAS.month[row,6] ||
MPF.Fidelity.sum < 1e-6 || hedge == TRUE) {
if (row >= 34) {
MPF.Fidelity.BIAS.p[6] <- 0.7
MPF.Fidelity.BIAS.p[14] <- 0.3
} else {
MPF.Fidelity.BIAS.p[6] <- 1
}
} else if (min(MPF.Fidelity.stock.return[(row-3):row]) < -0.08) {
if (row >= 34) {
MPF.Fidelity.BIAS.p[] <- MPF.Fidelity.BIAS.month[row, ] / MPF.Fidelity.sum / 10 * 7
MPF.Fidelity.BIAS.p[14] <- MPF.Fidelity.BIAS.p[14]+0.12
MPF.Fidelity.BIAS.p[6] <- MPF.Fidelity.BIAS.p[6]+0.18
} else {
MPF.Fidelity.BIAS.p[ ] <- MPF.Fidelity.BIAS.month[row, ] / MPF.Fidelity.sum / 10 * 7
MPF.Fidelity.BIAS.p[6] <- MPF.Fidelity.BIAS.p[6]+0.3
}
} else {
MPF.Fidelity.BIAS.p[ ] <- MPF.Fidelity.BIAS.month[row, ] / MPF.Fidelity.sum
}
MPF.portf.weight[row,] <-
round_percent(MPF.Fidelity.BIAS.p)
portf.rebal.fm <-
Return.portfolio(
na.fill(MPF.Fidelity.returns, 0),
weight = MPF.portf.weight[1:row,],
geometric = TRUE,
rebalance_on = "months"
)
MPF.portf.return[row] <-
tail(na.omit(portf.rebal.fm), 1)
MPF.portf.drawdown <- Drawdowns(MPF.portf.return,
geometric = TRUE)
if (tail(na.omit(MPF.portf.drawdown), 1) < -0.065 && up == FALSE) {
hedge = TRUE
}
}
portf.rebal.fm <- Return.portfolio(
MPF.Fidelity.returns,
weight = MPF.portf.weight,
geometric = TRUE,
rebalance_on = "months"
)
mean.annual.return <-
mean(do.call(rbind, lapply(split(portf.rebal.fm, "years"), function(x)
colMeans(x))) * 12)
charts.PerformanceSummary(
portf.rebal.fm,
methods = "ModifiedES",
geometric = TRUE,
p = .95,
main = "Fidelity MPF Scheme First Contribution Performance"
)
Return.cumulative(portf.rebal.fm, geometric=TRUE)
portf.rebal.fm.sharpe <- Return.annualized(portf.rebal.fm, geometric=TRUE) / (StdDev.annualized(portf.rebal.fm))
rownames(portf.rebal.fm.sharpe) <- "Sharpe Ratio"
Return.annualized(portf.rebal.fm, geometric=TRUE)
mean.annual.return
portf.rebal.fm.sharpe
portf.rebal.fm.sharpe.mean <- mean.annual.return / (StdDev.annualized(portf.rebal.fm))
rownames(portf.rebal.fm.sharpe.mean) <- "Sharpe Ratio (Mean annual return)"
portf.rebal.fm.sharpe.mean
StdDev.annualized(portf.rebal.fm)
SortinoRatio(portf.rebal.fm)
ES(portf.rebal.fm, method="historical")
tail(MPF.portf.weight, n=6)
MPF.Fidelity <-
as.xts(
read.zoo(
"~/OneDrive/MPF/Fidelity/Fidelity.csv",
format = "%d/%m/%Y",
read = read.csv,
na.strings = "0"
)
)
daily <- index(MPF.Fidelity)
MPF.Fidelity.SMA.hy <- na.fill(apply(MPF.Fidelity, 2, function(x) SMA(x, n=21*MA_long)), 0)
MPF.Fidelity.SMA.hy <- as.xts(MPF.Fidelity.SMA.hy, order.by = daily)
MPF.Fidelity.SMA.mt <- na.fill(apply(MPF.Fidelity, 2, function(x) SMA(x, n=21*MA_Short)), 0)
MPF.Fidelity.SMA.mt <- as.xts(MPF.Fidelity.SMA.mt, order.by = daily)
MPF.Fidelity.SMA.hy <- na.fill(apply(MPF.Fidelity, 2, function(x) SMA(x, n=21*MA_long)), 0)
MPF.Fidelity.SMA.hy <- as.xts(MPF.Fidelity.SMA.hy, order.by = daily)
MPF.Fidelity.SMA.mt <- na.fill(apply(MPF.Fidelity, 2, function(x) SMA(x, n=21*MA_Short)), 0)
MPF.Fidelity.SMA.mt <- as.xts(MPF.Fidelity.SMA.mt, order.by = daily)
MPF.Fidelity.RSI <- na.fill(apply(MPF.Fidelity, 2, function(x) RSI(x, n=21*RSI_Period)),0)
MPF.Fidelity.RSI <- as.xts(MPF.Fidelity.RSI, order.by = daily)
MPF.Fidelity.SFP <- monthlyReturn(as.xts(MPF.Fidelity$SFP), type="log")
MPF.Fidelity.CA  <- monthlyReturn(as.xts(MPF.Fidelity$CA), type="log")
MPF.Fidelity.AP  <- monthlyReturn(as.xts(MPF.Fidelity$AP), type="log")
MPF.Fidelity.B   <- monthlyReturn(as.xts(MPF.Fidelity$B), type="log")
MPF.Fidelity.S   <- monthlyReturn(as.xts(MPF.Fidelity$S), type="log")
MPF.Fidelity.MPFC <- monthlyReturn(as.xts(MPF.Fidelity$MPFC), type="log")
MPF.Fidelity.GE  <- monthlyReturn(as.xts(MPF.Fidelity$GE), type="log")
MPF.Fidelity.G   <- monthlyReturn(as.xts(MPF.Fidelity$G), type="log")
MPF.Fidelity.HKB <- monthlyReturn(as.xts(MPF.Fidelity$HKB), type="log")
MPF.Fidelity.HKE <- monthlyReturn(as.xts(MPF.Fidelity$HKE), type="log")
MPF.Fidelity.RMBB <- monthlyReturn(as.xts(MPF.Fidelity$RMBB), type="log")
MPF.Fidelity.SG  <- monthlyReturn(as.xts(MPF.Fidelity$SG), type="log")
MPF.Fidelity.HSI <- monthlyReturn(as.xts(MPF.Fidelity$HSI), type="log")
MPF.Fidelity.GB <- monthlyReturn(as.xts(MPF.Fidelity$GB), type="log")
MPF.Fidelity.Save2040 <- monthlyReturn(as.xts(MPF.Fidelity$Save2040), type="log")
MPF.Fidelity.returns <- merge(MPF.Fidelity.SFP, MPF.Fidelity.CA,MPF.Fidelity.AP,MPF.Fidelity.B,
MPF.Fidelity.S,MPF.Fidelity.MPFC,MPF.Fidelity.GE,MPF.Fidelity.G,
MPF.Fidelity.HKB,MPF.Fidelity.HKE,MPF.Fidelity.RMBB,MPF.Fidelity.SG,
MPF.Fidelity.HSI,MPF.Fidelity.GB,MPF.Fidelity.Save2040)
MPF.Fidelity.returns[MPF.Fidelity.returns == Inf] = 0
monthly <- index(MPF.Fidelity.returns)
colnames(MPF.Fidelity.returns) <- c('SFP','CA','AP','B','S','MPFC','GE','G',"HKB",'HKE','RMBB','SG','HSI','GB','Save2040')
rm(MPF.Fidelity.SFP, MPF.Fidelity.CA,MPF.Fidelity.AP,MPF.Fidelity.B,
MPF.Fidelity.S,MPF.Fidelity.MPFC,MPF.Fidelity.GE,MPF.Fidelity.G,
MPF.Fidelity.HKB,MPF.Fidelity.HKE,MPF.Fidelity.RMBB,MPF.Fidelity.SG,
MPF.Fidelity.HSI,MPF.Fidelity.GB,MPF.Fidelity.Save2040)
MPF.Fidelity.RSI.month <- as.xts(do.call(rbind, lapply(split(as.xts(MPF.Fidelity.RSI), "months"), function(x) colAvgs(x))), order.by = monthly)
MPF.Fidelity.RSI.p <- MPF.Fidelity.returns
MPF.Fidelity.RSI.p[,] <- 0
for (col in 1:length(MPF.Fidelity.RSI.month[1,])) {
if (col != 6) {
for (row in 1:length(MPF.Fidelity.RSI.month[,col])) {
percentile <- ecdf(as.numeric(MPF.Fidelity.RSI.month[1:row,col]))
if (percentile(MPF.Fidelity.RSI.month[row,col]) >= (RSI_Overbuy - 1/length(1:row)^(1/2))) {
MPF.Fidelity.RSI.p[row,col] <- 0.2
} else {
MPF.Fidelity.RSI.p[row,col] <- 1.2-(percentile(MPF.Fidelity.RSI.month[row,col])^(3))
}
}
} else {
MPF.Fidelity.RSI.p[,col] <- 1
}
}
MPF.Fidelity.RSI.sum <- as.xts(rowSums(MPF.Fidelity.RSI.p), order.by = monthly)
for (row in 1:length(MPF.Fidelity.RSI.p[,col])) {
MPF.Fidelity.RSI.p[row,] <- apply(MPF.Fidelity.RSI.p[row,], 2, function(x) (x/MPF.Fidelity.RSI.sum[row,1])^(1/4))
}
MPF.Fidelity.RSI.sum <- as.xts(rowSums(MPF.Fidelity.RSI.p), order.by = monthly)
rm(MPF.Fidelity.BIAS.diff, MPF.Fidelity.BIAS.diff.qu, MPF.Fidelity.BIAS.month, MPF.Fidelity.BIAS.p)
MPF.Fidelity.BIAS.diff <- (MPF.Fidelity.SMA.mt - MPF.Fidelity.SMA.hy) / MPF.Fidelity.SMA.hy
MPF.Fidelity.BIAS.diff.qu <- MPF.Fidelity.BIAS.diff - lag(MPF.Fidelity.BIAS.diff, k=21*nm)
MPF.Fidelity.BIAS.diff.qu <- na.fill(MPF.Fidelity.BIAS.diff.qu, 0)
MPF.Fidelity.BIAS.month <- do.call(rbind, lapply(split(as.xts(MPF.Fidelity.BIAS.diff.qu), "months"), function(x) colAvgs(x)))
MPF.portf.weight <- MPF.Fidelity.returns
MPF.portf.weight[,] <- NA
#colnames(MPF.portf.weight) <- c('SFP','CA','AP','B','S','MPFC','GE','G',"HKB",'HKE','RMBB','SG','HSI','GB','Save2040')
MPF.Fidelity.stock.return <- as.xts(rowSums(MPF.Fidelity.BIAS.month), order.by=monthly)
MPF.Fidelity.stock.return[] <- NA
MPF.portf.return <- as.xts(rowSums(MPF.Fidelity.BIAS.month), order.by=monthly)
MPF.portf.return[] <- NA
hedge <- FALSE
round_percent <- function(x) {
x <- x * 100
result <- floor(x)    # Find integer bits
remain <- x - result
rsum <- sum(result)   # Find out how much we are missing
i <- 1
if (rsum < 100) {
o <- order(remain, decreasing = TRUE)
while (rsum < 100) {
if (i > length(remain)) i <- 1
idx <- o[i]
if (result[idx] == 0) {
i <- i+1
next
}
result[idx] <- result[idx] + 1
rsum <- sum(result)
i <- i+1
}
}
result <- result/100
return(result)
}
MPF.Fidelity.returns.mat <- as.matrix(MPF.Fidelity.returns)
MPF.Fidelity.stock.mean <- 0
for (row in 1:length(MPF.Fidelity.BIAS.month[,1])) {
MPF.Fidelity.BIAS.month[row,] <- (MPF.Fidelity.BIAS.month[row,]) * MPF.Fidelity.RSI.p[row,]#* VIX.month[row,6] * (MPF.Fidelity.RSI.p[row,])
#colnames(MPF.portf.weight) <- c('SFP','CA','AP','B','S','MPFC','GE','G',"HKB",'HKE','RMBB','SG','HSI','GB','Save2040')
MPF.Fidelity.stock.mean <- 0
i <- 0
for (col in 1:length(MPF.Fidelity.BIAS.month[1,])) {
if (col != 1 && col != 4 && col != 5 && col != 6 && col != 9 && col != 11 && col != 12 && col != 14) {
if (!is.na(MPF.Fidelity.returns.mat[row, col]) &&
MPF.Fidelity.returns.mat[row, col] != 0) {
MPF.Fidelity.stock.mean <- MPF.Fidelity.stock.mean + MPF.Fidelity.returns.mat[row, col]
i <- i + 1
}
if (MPF.Fidelity.BIAS.month[row, col] < 1e-6) {
MPF.Fidelity.BIAS.month[row, col] <- 0
}
} else {
if (MPF.Fidelity.BIAS.month[row, col] < 0) {
MPF.Fidelity.BIAS.month[row, col] <- 0
}
}
# if (MPF.Fidelity.BIAS.month[row,col] < Min_NMMA){
#   MPF.Fidelity.BIAS.month[row,col] <- 0
# }
}
MPF.Fidelity.stock.return[row] <- MPF.Fidelity.stock.mean / i
if (is.nan(MPF.Fidelity.BIAS.month[row,col])) {
MPF.Fidelity.BIAS.month[row,col] <- 0
}
# Retain two most increasing fund
last <- length(MPF.Fidelity.BIAS.month[1,]) - top
order <- order(MPF.Fidelity.BIAS.month[row,])[1:last]
for (col in order) {
MPF.Fidelity.BIAS.month[row,col] <- 0
}
MPF.Fidelity.sum <- sum(MPF.Fidelity.BIAS.month[row,])
MPF.Fidelity.BIAS.p <- MPF.Fidelity.BIAS.month[row,]
MPF.Fidelity.BIAS.p[] <- 0
if (row > 8 && MPF.Fidelity.stock.return[row] <
quantile(na.omit(MPF.Fidelity.stock.return), c(.35)) &&
MPF.Fidelity.stock.return[row - 3] <
quantile(na.omit(MPF.Fidelity.stock.return), c(.45))) {
up <- FALSE
}
if (row > 8 && hedge &&
MPF.Fidelity.stock.return[row] >
quantile(na.omit(MPF.Fidelity.stock.return), c(.45))  &&
MPF.Fidelity.stock.return[row - 3] >
quantile(na.omit(MPF.Fidelity.stock.return), c(.35))) {
hedge <- FALSE
up <- TRUE
}
if (row > 8 &&  (MPF.Fidelity.stock.return[row] < 0 &&
MPF.Fidelity.stock.return[row-1] >
quantile(na.omit(MPF.Fidelity.stock.return), c(.85)))) {
hedge <- TRUE
}
MPF.Fidelity.sum <- sum(MPF.Fidelity.BIAS.month[row, ])
MPF.Fidelity.BIAS.p[] <- 0
if (row <= 12 || MPF.Fidelity.sum == MPF.Fidelity.BIAS.month[row,6] ||
MPF.Fidelity.sum < 1e-6 || hedge == TRUE) {
if (row >= 34) {
MPF.Fidelity.BIAS.p[6] <- 0.7
MPF.Fidelity.BIAS.p[14] <- 0.3
} else {
MPF.Fidelity.BIAS.p[6] <- 1
}
} else if (min(MPF.Fidelity.stock.return[(row-3):row]) < -0.08) {
if (row >= 34) {
MPF.Fidelity.BIAS.p[] <- MPF.Fidelity.BIAS.month[row, ] / MPF.Fidelity.sum / 10 * 7
MPF.Fidelity.BIAS.p[14] <- MPF.Fidelity.BIAS.p[14]+0.12
MPF.Fidelity.BIAS.p[6] <- MPF.Fidelity.BIAS.p[6]+0.18
} else {
MPF.Fidelity.BIAS.p[ ] <- MPF.Fidelity.BIAS.month[row, ] / MPF.Fidelity.sum / 10 * 7
MPF.Fidelity.BIAS.p[6] <- MPF.Fidelity.BIAS.p[6]+0.3
}
} else {
MPF.Fidelity.BIAS.p[ ] <- MPF.Fidelity.BIAS.month[row, ] / MPF.Fidelity.sum
}
MPF.portf.weight[row,] <-
round_percent(MPF.Fidelity.BIAS.p)
portf.rebal.fm <-
Return.portfolio(
na.fill(MPF.Fidelity.returns, 0),
weight = MPF.portf.weight[1:row,],
geometric = TRUE,
rebalance_on = "months"
)
MPF.portf.return[row] <-
tail(na.omit(portf.rebal.fm), 1)
MPF.portf.drawdown <- Drawdowns(MPF.portf.return,
geometric = TRUE)
if (tail(na.omit(MPF.portf.drawdown), 1) < -0.065 && up == FALSE) {
hedge = TRUE
}
}
portf.rebal.fm <- Return.portfolio(
MPF.Fidelity.returns,
weight = MPF.portf.weight,
geometric = TRUE,
rebalance_on = "months"
)
mean.annual.return <-
mean(do.call(rbind, lapply(split(portf.rebal.fm, "years"), function(x)
colMeans(x))) * 12)
charts.PerformanceSummary(
portf.rebal.fm,
methods = "ModifiedES",
geometric = TRUE,
p = .95,
main = "Fidelity MPF Scheme First Contribution Performance"
)
Return.cumulative(portf.rebal.fm, geometric=TRUE)
portf.rebal.fm.sharpe <- Return.annualized(portf.rebal.fm, geometric=TRUE) / (StdDev.annualized(portf.rebal.fm))
rownames(portf.rebal.fm.sharpe) <- "Sharpe Ratio"
Return.annualized(portf.rebal.fm, geometric=TRUE)
mean.annual.return
portf.rebal.fm.sharpe
portf.rebal.fm.sharpe.mean <- mean.annual.return / (StdDev.annualized(portf.rebal.fm))
rownames(portf.rebal.fm.sharpe.mean) <- "Sharpe Ratio (Mean annual return)"
portf.rebal.fm.sharpe.mean
StdDev.annualized(portf.rebal.fm)
SortinoRatio(portf.rebal.fm)
ES(portf.rebal.fm, method="historical")
tail(MPF.portf.weight, n=6)
rm(MPF.Fidelity.BIAS.diff, MPF.Fidelity.BIAS.diff.qu, MPF.Fidelity.BIAS.month, MPF.Fidelity.BIAS.p)
MPF.Fidelity.BIAS.diff <- (MPF.Fidelity.SMA.mt - MPF.Fidelity.SMA.hy) / MPF.Fidelity.SMA.hy
MPF.Fidelity.BIAS.diff.qu <- MPF.Fidelity.BIAS.diff - lag(MPF.Fidelity.BIAS.diff, k=21*nm)
MPF.Fidelity.BIAS.diff.qu <- na.fill(MPF.Fidelity.BIAS.diff.qu, 0)
MPF.Fidelity.BIAS.month <- do.call(rbind, lapply(split(as.xts(MPF.Fidelity.BIAS.diff.qu), "months"), function(x) colAvgs(x)))
MPF.portf.weight <- MPF.Fidelity.returns
MPF.portf.weight[,] <- NA
#colnames(MPF.portf.weight) <- c('SFP','CA','AP','B','S','MPFC','GE','G',"HKB",'HKE','RMBB','SG','HSI','GB','Save2040')
MPF.Fidelity.stock.return <- as.xts(rowSums(MPF.Fidelity.BIAS.month), order.by=monthly)
MPF.Fidelity.stock.return[] <- NA
MPF.portf.return <- as.xts(rowSums(MPF.Fidelity.BIAS.month), order.by=monthly)
MPF.portf.return[] <- NA
hedge <- FALSE
round_percent <- function(x) {
x <- x * 100
result <- floor(x)    # Find integer bits
remain <- x - result
rsum <- sum(result)   # Find out how much we are missing
i <- 1
if (rsum < 100) {
o <- order(remain, decreasing = TRUE)
while (rsum < 100) {
if (i > length(remain)) i <- 1
idx <- o[i]
if (result[idx] == 0) {
i <- i+1
next
}
result[idx] <- result[idx] + 1
rsum <- sum(result)
i <- i+1
}
}
result <- result/100
return(result)
}
MPF.Fidelity.returns.mat <- as.matrix(MPF.Fidelity.returns)
MPF.Fidelity.stock.mean <- 0
for (row in 1:length(MPF.Fidelity.BIAS.month[,1])) {
MPF.Fidelity.BIAS.month[row,] <- (MPF.Fidelity.BIAS.month[row,]) * MPF.Fidelity.RSI.p[row,]#* VIX.month[row,6] * (MPF.Fidelity.RSI.p[row,])
#colnames(MPF.portf.weight) <- c('SFP','CA','AP','B','S','MPFC','GE','G',"HKB",'HKE','RMBB','SG','HSI','GB','Save2040')
MPF.Fidelity.stock.mean <- 0
i <- 0
for (col in 1:length(MPF.Fidelity.BIAS.month[1,])) {
if (col != 1 && col != 4 && col != 5 && col != 6 && col != 9 && col != 11 && col != 12 && col != 14) {
if (!is.na(MPF.Fidelity.returns.mat[row, col]) &&
MPF.Fidelity.returns.mat[row, col] != 0) {
MPF.Fidelity.stock.mean <- MPF.Fidelity.stock.mean + MPF.Fidelity.returns.mat[row, col]
i <- i + 1
}
if (MPF.Fidelity.BIAS.month[row, col] < 1e-6) {
MPF.Fidelity.BIAS.month[row, col] <- 0
}
} else {
if (MPF.Fidelity.BIAS.month[row, col] < 0) {
MPF.Fidelity.BIAS.month[row, col] <- 0
}
}
# if (MPF.Fidelity.BIAS.month[row,col] < Min_NMMA){
#   MPF.Fidelity.BIAS.month[row,col] <- 0
# }
}
MPF.Fidelity.stock.return[row] <- MPF.Fidelity.stock.mean / i
if (is.nan(MPF.Fidelity.BIAS.month[row,col])) {
MPF.Fidelity.BIAS.month[row,col] <- 0
}
# Retain two most increasing fund
last <- length(MPF.Fidelity.BIAS.month[1,]) - top
order <- order(MPF.Fidelity.BIAS.month[row,])[1:last]
for (col in order) {
MPF.Fidelity.BIAS.month[row,col] <- 0
}
MPF.Fidelity.sum <- sum(MPF.Fidelity.BIAS.month[row,])
MPF.Fidelity.BIAS.p <- MPF.Fidelity.BIAS.month[row,]
MPF.Fidelity.BIAS.p[] <- 0
if (row > 8 && MPF.Fidelity.stock.return[row] <
quantile(na.omit(MPF.Fidelity.stock.return), c(.35)) &&
MPF.Fidelity.stock.return[row - 3] <
quantile(na.omit(MPF.Fidelity.stock.return), c(.45))) {
up <- FALSE
}
if (row > 8 && hedge &&
MPF.Fidelity.stock.return[row] >
quantile(na.omit(MPF.Fidelity.stock.return), c(.45))  &&
MPF.Fidelity.stock.return[row - 3] >
quantile(na.omit(MPF.Fidelity.stock.return), c(.35))) {
hedge <- FALSE
up <- TRUE
}
if (row > 8 &&  (MPF.Fidelity.stock.return[row] < 0 &&
MPF.Fidelity.stock.return[row-1] >
quantile(na.omit(MPF.Fidelity.stock.return), c(.8)))) {
hedge <- TRUE
}
MPF.Fidelity.sum <- sum(MPF.Fidelity.BIAS.month[row, ])
MPF.Fidelity.BIAS.p[] <- 0
if (row <= 12 || MPF.Fidelity.sum == MPF.Fidelity.BIAS.month[row,6] ||
MPF.Fidelity.sum < 1e-6 || hedge == TRUE) {
if (row >= 34) {
MPF.Fidelity.BIAS.p[6] <- 0.7
MPF.Fidelity.BIAS.p[14] <- 0.3
} else {
MPF.Fidelity.BIAS.p[6] <- 1
}
} else if (min(MPF.Fidelity.stock.return[(row-3):row]) < -0.08) {
if (row >= 34) {
MPF.Fidelity.BIAS.p[] <- MPF.Fidelity.BIAS.month[row, ] / MPF.Fidelity.sum / 10 * 7
MPF.Fidelity.BIAS.p[14] <- MPF.Fidelity.BIAS.p[14]+0.12
MPF.Fidelity.BIAS.p[6] <- MPF.Fidelity.BIAS.p[6]+0.18
} else {
MPF.Fidelity.BIAS.p[ ] <- MPF.Fidelity.BIAS.month[row, ] / MPF.Fidelity.sum / 10 * 7
MPF.Fidelity.BIAS.p[6] <- MPF.Fidelity.BIAS.p[6]+0.3
}
} else {
MPF.Fidelity.BIAS.p[ ] <- MPF.Fidelity.BIAS.month[row, ] / MPF.Fidelity.sum
}
MPF.portf.weight[row,] <-
round_percent(MPF.Fidelity.BIAS.p)
portf.rebal.fm <-
Return.portfolio(
na.fill(MPF.Fidelity.returns, 0),
weight = MPF.portf.weight[1:row,],
geometric = TRUE,
rebalance_on = "months"
)
MPF.portf.return[row] <-
tail(na.omit(portf.rebal.fm), 1)
MPF.portf.drawdown <- Drawdowns(MPF.portf.return,
geometric = TRUE)
if (tail(na.omit(MPF.portf.drawdown), 1) < -0.065 && up == FALSE) {
hedge = TRUE
}
}
portf.rebal.fm <- Return.portfolio(
MPF.Fidelity.returns,
weight = MPF.portf.weight,
geometric = TRUE,
rebalance_on = "months"
)
mean.annual.return <-
mean(do.call(rbind, lapply(split(portf.rebal.fm, "years"), function(x)
colMeans(x))) * 12)
charts.PerformanceSummary(
portf.rebal.fm,
methods = "ModifiedES",
geometric = TRUE,
p = .95,
main = "Fidelity MPF Scheme First Contribution Performance"
)
Return.cumulative(portf.rebal.fm, geometric=TRUE)
portf.rebal.fm.sharpe <- Return.annualized(portf.rebal.fm, geometric=TRUE) / (StdDev.annualized(portf.rebal.fm))
rownames(portf.rebal.fm.sharpe) <- "Sharpe Ratio"
Return.annualized(portf.rebal.fm, geometric=TRUE)
mean.annual.return
portf.rebal.fm.sharpe
portf.rebal.fm.sharpe.mean <- mean.annual.return / (StdDev.annualized(portf.rebal.fm))
rownames(portf.rebal.fm.sharpe.mean) <- "Sharpe Ratio (Mean annual return)"
portf.rebal.fm.sharpe.mean
StdDev.annualized(portf.rebal.fm)
SortinoRatio(portf.rebal.fm)
ES(portf.rebal.fm, method="historical")
tail(MPF.portf.weight, n=6)
