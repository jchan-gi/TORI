MPF.BCT.stock.mean <- 0
for (row in 1:length(MPF.BCT.BIAS.month[,1])) {
MPF.BCT.BIAS.month[row,] <- (MPF.BCT.BIAS.month[row,]) * MPF.BCT.RSI.p[row,]#* VIX.month[row,6] * (MPF.BCT.RSI.p[row,])
MPF.BCT.stock.mean <- 0
i <- 0
for (col in 1:length(MPF.BCT.BIAS.month[1,])) {
if (col != 2 &&
col != 6 &&
col != 7 &&
col != 11 && col != 14 && col != 16 && col != 17 && col != 18) {
if (!is.na(MPF.BCT.returns.mat[row, col]) &&
MPF.BCT.returns.mat[row, col] != 0) {
MPF.BCT.stock.mean <- MPF.BCT.stock.mean + MPF.BCT.returns.mat[row, col]
i <- i + 1
}
if (MPF.BCT.BIAS.month[row, col] < 1e-6) {
MPF.BCT.BIAS.month[row, col] <- 0
}
} else {
if (MPF.BCT.BIAS.month[row, col] < 0) {
MPF.BCT.BIAS.month[row, col] <- 0
}
}
# if (MPF.BCT.BIAS.month[row,col] < Min_NMMA){
#   MPF.BCT.BIAS.month[row,col] <- 0
# }
}
MPF.BCT.stock.return[row] <- MPF.BCT.stock.mean / i
if (is.nan(MPF.BCT.BIAS.month[row,col])) {
MPF.BCT.BIAS.month[row,col] <- 0
}
# Retain two most increasing fund
last <- length(MPF.BCT.BIAS.month[1,]) - top
order <- order(MPF.BCT.BIAS.month[row,])[1:last]
for (col in order) {
MPF.BCT.BIAS.month[row,col] <- 0
}
MPF.BCT.sum <- sum(MPF.BCT.BIAS.month[row,])
MPF.BCT.BIAS.p <- MPF.BCT.BIAS.month[row,]
MPF.BCT.BIAS.p[] <- 0
if (row > 8 && MPF.BCT.stock.return[row] <
quantile(na.omit(MPF.BCT.stock.return), c(.40)) &&
MPF.BCT.stock.return[row - 3] <
quantile(na.omit(MPF.BCT.stock.return), c(.50))) {
up <- FALSE
}
if (row > 8 && hedge &&
MPF.BCT.stock.return[row] >
quantile(na.omit(MPF.BCT.stock.return), c(.50))  &&
MPF.BCT.stock.return[row - 3] >
quantile(na.omit(MPF.BCT.stock.return), c(.40))) {
hedge <- FALSE
up <- TRUE
}
if (row > 8 &&  (MPF.BCT.stock.return[row] < 0 &&
MPF.BCT.stock.return[row-1] >
quantile(na.omit(MPF.BCT.stock.return), c(.85)))) {
hedge <- TRUE
}
MPF.BCT.sum <- sum(MPF.BCT.BIAS.month[row, ])
MPF.BCT.BIAS.p[] <- 0
if (row <= 12 || MPF.BCT.sum == MPF.BCT.BIAS.month[row, 16] ||
MPF.BCT.sum < 1e-6 || hedge == TRUE) {
if (row >= 24) {
MPF.BCT.BIAS.p[11] <- 0.3
MPF.BCT.BIAS.p[16] <- 0.7
} else {
MPF.BCT.BIAS.p[16] <- 1
}
} else if (min(MPF.BCT.stock.return[(row-3):row]) < -0.075) {
if (row >= 24) {
MPF.BCT.BIAS.p[] <- MPF.BCT.BIAS.month[row, ] / MPF.BCT.sum / 10 * 7
MPF.BCT.BIAS.p[16] <- MPF.BCT.BIAS.p[16]+0.18
MPF.BCT.BIAS.p[11] <- MPF.BCT.BIAS.p[11]+0.12
} else {
MPF.BCT.BIAS.p[ ] <- MPF.BCT.BIAS.month[row, ] / MPF.BCT.sum / 10 * 7
MPF.BCT.BIAS.p[11] <- MPF.BCT.BIAS.p[11]+0.3
}
} else {
MPF.BCT.BIAS.p[ ] <- MPF.BCT.BIAS.month[row, ] / MPF.BCT.sum
}
# Change Global Equity fund to World Equity Tracking fund
if (MPF.BCT.BIAS.p[12] != 0 && monthly[row] > "2012-08-31") {
MPF.BCT.BIAS.p[13] <- MPF.BCT.BIAS.p[13] + MPF.BCT.BIAS.p[12]
MPF.BCT.BIAS.p[12] <- 0
}
# Change Hong Kong & Chinese Equity to portfolio
if (MPF.BCT.BIAS.p[3] != 0 && monthly[row] > "2012-08-31") {
MPF.BCT.BIAS.p[19] <- MPF.BCT.BIAS.p[19] + (MPF.BCT.BIAS.p[3] / 3)
MPF.BCT.BIAS.p[15] <- MPF.BCT.BIAS.p[15] + (MPF.BCT.BIAS.p[3] / 3)
MPF.BCT.BIAS.p[4] <- MPF.BCT.BIAS.p[4] + (MPF.BCT.BIAS.p[3] / 3)
MPF.BCT.BIAS.p[3] <- 0
# Change Hong Kong & Chinese Equity to Fidelity Save Easy 2040 & HSIT
} else if (MPF.BCT.BIAS.p[3] != 0 && monthly[row] > "2008-11-30") {
MPF.BCT.BIAS.p[19] <- MPF.BCT.BIAS.p[19] + (MPF.BCT.BIAS.p[3] / 2)
MPF.BCT.BIAS.p[15] <- MPF.BCT.BIAS.p[15] + (MPF.BCT.BIAS.p[3] / 2)
MPF.BCT.BIAS.p[3] <- 0
}
MPF.portf.weight[row,] <-
round_percent(MPF.BCT.BIAS.p)
portf.rebal.fm <-
Return.portfolio(
na.fill(MPF.BCT.returns, 0),
weight = MPF.portf.weight[1:row,],
geometric = TRUE,
rebalance_on = "months"
)
MPF.portf.return[row] <-
tail(na.omit(portf.rebal.fm), 1)
MPF.portf.drawdown <- Drawdowns(MPF.portf.return,
geometric = TRUE)
if (tail(na.omit(MPF.portf.drawdown), 1) < -0.065 && up == FALSE) {
hedge = TRUE
}
}
portf.rebal.fm <- Return.portfolio(
MPF.BCT.returns,
weight = MPF.portf.weight,
geometric = TRUE,
rebalance_on = "months"
)
mean.annual.return <-
mean(do.call(rbind, lapply(split(portf.rebal.fm, "years"), function(x)
colMeans(x))) * 12)
charts.PerformanceSummary(
portf.rebal.fm,
methods = "ModifiedES",
geometric = TRUE,
p = .95,
main = "BCT MPF Scheme First Contribution Performance"
)
Return.cumulative(portf.rebal.fm, geometric=TRUE)
portf.rebal.fm.sharpe <- Return.annualized(portf.rebal.fm, geometric=TRUE) / (StdDev.annualized(portf.rebal.fm))
rownames(portf.rebal.fm.sharpe) <- "Sharpe Ratio"
Return.annualized(portf.rebal.fm, geometric=TRUE)
mean.annual.return
portf.rebal.fm.sharpe
portf.rebal.fm.sharpe.mean <- mean.annual.return / (StdDev.annualized(portf.rebal.fm))
rownames(portf.rebal.fm.sharpe.mean) <- "Sharpe Ratio (Mean annual return)"
portf.rebal.fm.sharpe.mean
StdDev.annualized(portf.rebal.fm)
SortinoRatio(portf.rebal.fm)
ES(portf.rebal.fm, method="historical")
tail(MPF.portf.weight, n=6)
MPF.BCT.units <- MPF.BCT.returns
MPF.BCT.units[, ] <- 0
MPF.monthly.asset <- MPF.BCT.returns
MPF.monthly.asset[, ] <- 0
MPF.monthly.returns <-
as.xts(rowSums(MPF.BCT.returns), order.by = monthly)
MPF.monthly.returns[] <- 0
MPF.time <- 0:length(MPF.BCT.returns[, 1]) / 12
MPF.pay <- -1500 + 0 * MPF.time
for (row in 1:length(MPF.BCT.returns[, 1])) {
this.price <- as.matrix(MPF.BCT[monthly[row]])
MPF.BCT.units[row, ] <- this.price
if (row == 1) {
last.value <- 1500
this.value <- as.numeric((1500 / MPF.BCT[1, 16]) * this.price[16])
MPF.monthly.returns[row] <- log(this.value / last.value)
MPF.monthly.asset[row,] <-
(this.value + 1500) / this.price * MPF.portf.weight[row, ]
last.price <- this.price
} else {
last.value <-
as.numeric(sum(na.fill(last.price * MPF.monthly.asset[row - 1, ], 0)))
this.value <-
as.numeric(sum(na.fill(this.price * MPF.monthly.asset[row - 1, ], 0)))
MPF.monthly.returns[row] <- log(this.value / last.value)
MPF.monthly.asset[row,] <-
(this.value + 1500) / this.price * MPF.portf.weight[row, ]
last.price <- this.price
}
}
total.asset.value <- sum(MPF.monthly.asset[row, ] * this.price)
total.contribution <- 1500 * length(MPF.BCT.returns[, 1])
MPF.pay[row + 1] <- total.asset.value
IRR.f <- function(r)
sum(MPF.pay * exp(-r * MPF.time))
IRR.root <- uniroot(IRR.f, c(0, 1))
total.asset.value
total.contribution
mean.monthly.annual.return <-
mean(do.call(rbind, lapply(split(MPF.monthly.returns, "years"), function(x)
colMeans(x))) * 12)
mean.monthly.annual.return
IRR.root$root
stddev.monthly <- (StdDev(MPF.monthly.returns) * sqrt(12))
monthly.installment.sharpe.ratio <-
mean.monthly.annual.return / stddev.monthly
rownames(monthly.installment.sharpe.ratio) <-
"Sharpe Ratio (mean annual return)"
StdDev.annualized(MPF.monthly.returns)
monthly.installment.sharpe.ratio
SortinoRatio(MPF.monthly.returns)
ES(MPF.monthly.returns, method = "historical")
MPF.BCT.AE <- monthlyReturn(as.xts(MPF.BCT$AE), type = "log")
MPF.BCT.CA <- monthlyReturn(as.xts(MPF.BCT$CA), type = "log")
MPF.BCT.CEHK <- monthlyReturn(as.xts(MPF.BCT$CEHK), type = "log")
MPF.BCT.CT <- monthlyReturn(as.xts(MPF.BCT$CT), type = "log")
MPF.BCT.EU <- monthlyReturn(as.xts(MPF.BCT$EU), type = "log")
MPF.BCT.E3 <- monthlyReturn(as.xts(MPF.BCT$E30), type = "log")
MPF.BCT.E5 <- monthlyReturn(as.xts(MPF.BCT$E50), type = "log")
MPF.BCT.E7 <- monthlyReturn(as.xts(MPF.BCT$E70), type = "log")
MPF.BCT.E9 <- monthlyReturn(as.xts(MPF.BCT$E90), type = "log")
MPF.BCT.FM <- monthlyReturn(as.xts(MPF.BCT$FM), type = "log")
MPF.BCT.GB <- monthlyReturn(as.xts(MPF.BCT$GB), type = "log")
MPF.BCT.GE <- monthlyReturn(as.xts(MPF.BCT$GE), type = "log")
MPF.BCT.GT <- monthlyReturn(as.xts(MPF.BCT$GT), type = "log")
MPF.BCT.HKB <- monthlyReturn(as.xts(MPF.BCT$HKB), type = "log")
MPF.BCT.HSIT <- monthlyReturn(as.xts(MPF.BCT$HSIT), type = "log")
MPF.BCT.MPFC <- monthlyReturn(as.xts(MPF.BCT$MPFC), type = "log")
MPF.BCT.RMBB <- monthlyReturn(as.xts(MPF.BCT$RMBB), type = "log")
MPF.BCT.SFP <- monthlyReturn(as.xts(MPF.BCT$SFP), type = "log")
MPF.BCT.SE40 <- monthlyReturn(as.xts(MPF.BCT$SE2040), type = "log")
MPF.BCT.returns <-
merge(
MPF.BCT.AE, MPF.BCT.CA, MPF.BCT.CEHK, MPF.BCT.CT, MPF.BCT.EU,
MPF.BCT.E3, MPF.BCT.E5, MPF.BCT.E7, MPF.BCT.E9, MPF.BCT.FM,
MPF.BCT.GB, MPF.BCT.GE, MPF.BCT.GT, MPF.BCT.HKB, MPF.BCT.HSIT,
MPF.BCT.MPFC, MPF.BCT.RMBB, MPF.BCT.SFP, MPF.BCT.SE40
)
MPF.BCT.original.cost <-
c(
0.0182,0.0085,0.0166,0.0115,0.0165,
0.0163,0.0163,0.0162,0.0152,0.0136,
0.0150,0.0167,0.0100,0.0112,0.0084,
0.0094,0.0126,0.0082,0.0150
) / 12
MPF.BCT.cs.cost <-
c(
0.0069,0.0062,0.0069,0.0060,0.0069,
0.0062,0.0062,0.0062,0.0062,0.0062,
0.0055,0.0069,0.0060,0.0055,0.0050,
0.0040,0.0055,0.0062,0.0062
) / 12
for (col in 1:length(MPF.BCT.returns[1, ])) {
MPF.BCT.returns[, col] <-
MPF.BCT.returns[, col] - MPF.BCT.cs.cost[col] + MPF.BCT.original.cost[col]
}
monthly <- index(MPF.BCT.returns)
#monthly <- length(monthly)
MPF.BCT.colnames <-
c(
"MPF.BCT.AE","MPF.BCT.CA","MPF.BCT.CEHK","MPF.BCT.CT","MPF.BCT.EU",
"MPF.BCT.E3","MPF.BCT.E5","MPF.BCT.E7","MPF.BCT.E9","MPF.BCT.FM",
"MPF.BCT.GB","MPF.BCT.GE","MPF.BCT.GT","MPF.BCT.HKB","MPF.BCT.HSIT",
"MPF.BCT.MPFC","MPF.BCT.RMBB","MPF.BCT.SFP","MPF.BCT.SE2040"
)
colnames(MPF.BCT.returns) <- MPF.BCT.colnames
rm(
MPF.BCT.AE, MPF.BCT.CA, MPF.BCT.CEHK, MPF.BCT.CT, MPF.BCT.EU,
MPF.BCT.E3, MPF.BCT.E5, MPF.BCT.E7, MPF.BCT.E9, MPF.BCT.FM,
MPF.BCT.GB, MPF.BCT.GE, MPF.BCT.GT, MPF.BCT.HKB, MPF.BCT.HSIT,
MPF.BCT.MPFC, MPF.BCT.RMBB, MPF.BCT.SFP, MPF.BCT.SE40
)
MPF.BCT.RSI.month <- as.xts(do.call(rbind, lapply(split(as.xts(MPF.BCT.RSI), "months"), function(x) colAvgs(x))), order.by = monthly)
MPF.BCT.RSI.p <- MPF.BCT.returns
MPF.BCT.RSI.p[,] <- 0
for (col in 1:length(MPF.BCT.RSI.month[1,])) {
if (col != 16) {
for (row in 1:length(MPF.BCT.RSI.month[,col])) {
percentile <- ecdf(as.numeric(MPF.BCT.RSI.month[1:row,col]))
if (percentile(MPF.BCT.RSI.month[row,col]) >= (RSI_Overbuy - 1/length(1:row)^(1/2))) {
MPF.BCT.RSI.p[row,col] <- 0.2
} else {
MPF.BCT.RSI.p[row,col] <- 1.2-(percentile(MPF.BCT.RSI.month[row,col])^(3))
}
}
} else {
MPF.BCT.RSI.p[,col] <- 1
}
}
MPF.BCT.RSI.sum <- as.xts(rowSums(MPF.BCT.RSI.p), order.by = monthly)
for (row in 1:length(MPF.BCT.RSI.p[,col])) {
MPF.BCT.RSI.p[row,] <- apply(MPF.BCT.RSI.p[row,], 2, function(x) (x/MPF.BCT.RSI.sum[row,1])^(1/4))
}
MPF.BCT.RSI.sum <- as.xts(rowSums(MPF.BCT.RSI.p), order.by = monthly)
rm(MPF.BCT.BIAS.diff, MPF.BCT.BIAS.diff.qu, MPF.BCT.BIAS.month, MPF.BCT.BIAS.p)
MPF.BCT.BIAS.diff <- (MPF.BCT.SMA.mt - MPF.BCT.SMA.hy) / MPF.BCT.SMA.hy
MPF.BCT.BIAS.diff.qu <- MPF.BCT.BIAS.diff - lag(MPF.BCT.BIAS.diff, k=21*nm)
MPF.BCT.BIAS.diff.qu <- na.fill(MPF.BCT.BIAS.diff.qu, 0)
MPF.BCT.BIAS.month <- do.call(rbind, lapply(split(as.xts(MPF.BCT.BIAS.diff.qu), "months"), function(x) colAvgs(x)))
MPF.portf.weight <- MPF.BCT.returns
MPF.portf.weight[,] <- NA
#colnames(MPF.portf.weight) <- c("AP", "B", "CA", "CE", "EE", "G", "GB", "HSIT", "HKCE", "MPFC", "NA", "S", "HSHIT", "VCAP", "VCB", "VCE", "VCUS", "GE")
MPF.BCT.stock.return <- as.xts(rowSums(MPF.BCT.BIAS.month), order.by=monthly)
MPF.BCT.stock.return[] <- NA
MPF.portf.return <- as.xts(rowSums(MPF.BCT.BIAS.month), order.by=monthly)
MPF.portf.return[] <- NA
hedge <- FALSE
round_percent <- function(x) {
x <- x * 100
result <- floor(x)    # Find integer bits
remain <- x - result
rsum <- sum(result)   # Find out how much we are missing
i <- 1
if (rsum < 100) {
o <- order(remain, decreasing = TRUE)
while (rsum < 100) {
if (i > length(remain)) i <- 1
idx <- o[i]
if (result[idx] == 0) {
i <- i+1
next
}
result[idx] <- result[idx] + 1
rsum <- sum(result)
i <- i+1
}
}
result <- result/100
return(result)
}
MPF.BCT.returns.mat <- as.matrix(MPF.BCT.returns)
MPF.BCT.stock.mean <- 0
for (row in 1:length(MPF.BCT.BIAS.month[,1])) {
MPF.BCT.BIAS.month[row,] <- (MPF.BCT.BIAS.month[row,]) * MPF.BCT.RSI.p[row,]#* VIX.month[row,6] * (MPF.BCT.RSI.p[row,])
MPF.BCT.stock.mean <- 0
i <- 0
for (col in 1:length(MPF.BCT.BIAS.month[1,])) {
if (col != 2 &&
col != 6 &&
col != 7 &&
col != 11 && col != 14 && col != 16 && col != 17 && col != 18) {
if (!is.na(MPF.BCT.returns.mat[row, col]) &&
MPF.BCT.returns.mat[row, col] != 0) {
MPF.BCT.stock.mean <- MPF.BCT.stock.mean + MPF.BCT.returns.mat[row, col]
i <- i + 1
}
if (MPF.BCT.BIAS.month[row, col] < 1e-6) {
MPF.BCT.BIAS.month[row, col] <- 0
}
} else {
if (MPF.BCT.BIAS.month[row, col] < 0) {
MPF.BCT.BIAS.month[row, col] <- 0
}
}
# if (MPF.BCT.BIAS.month[row,col] < Min_NMMA){
#   MPF.BCT.BIAS.month[row,col] <- 0
# }
}
MPF.BCT.stock.return[row] <- MPF.BCT.stock.mean / i
if (is.nan(MPF.BCT.BIAS.month[row,col])) {
MPF.BCT.BIAS.month[row,col] <- 0
}
# Retain two most increasing fund
last <- length(MPF.BCT.BIAS.month[1,]) - top
order <- order(MPF.BCT.BIAS.month[row,])[1:last]
for (col in order) {
MPF.BCT.BIAS.month[row,col] <- 0
}
MPF.BCT.sum <- sum(MPF.BCT.BIAS.month[row,])
MPF.BCT.BIAS.p <- MPF.BCT.BIAS.month[row,]
MPF.BCT.BIAS.p[] <- 0
if (row > 8 && MPF.BCT.stock.return[row] <
quantile(na.omit(MPF.BCT.stock.return), c(.40)) &&
MPF.BCT.stock.return[row - 3] <
quantile(na.omit(MPF.BCT.stock.return), c(.50))) {
up <- FALSE
}
if (row > 8 && hedge &&
MPF.BCT.stock.return[row] >
quantile(na.omit(MPF.BCT.stock.return), c(.50))  &&
MPF.BCT.stock.return[row - 3] >
quantile(na.omit(MPF.BCT.stock.return), c(.40))) {
hedge <- FALSE
up <- TRUE
}
if (row > 8 &&  (MPF.BCT.stock.return[row] < 0 &&
MPF.BCT.stock.return[row-1] >
quantile(na.omit(MPF.BCT.stock.return), c(.85)))) {
hedge <- TRUE
}
MPF.BCT.sum <- sum(MPF.BCT.BIAS.month[row, ])
MPF.BCT.BIAS.p[] <- 0
if (row <= 12 || MPF.BCT.sum == MPF.BCT.BIAS.month[row, 16] ||
MPF.BCT.sum < 1e-6 || hedge == TRUE) {
if (row >= 24) {
MPF.BCT.BIAS.p[11] <- 0.3
MPF.BCT.BIAS.p[16] <- 0.7
} else {
MPF.BCT.BIAS.p[16] <- 1
}
} else if (min(MPF.BCT.stock.return[(row-3):row]) < -0.075) {
if (row >= 24) {
MPF.BCT.BIAS.p[] <- MPF.BCT.BIAS.month[row, ] / MPF.BCT.sum / 10 * 7
MPF.BCT.BIAS.p[16] <- MPF.BCT.BIAS.p[16]+0.18
MPF.BCT.BIAS.p[11] <- MPF.BCT.BIAS.p[11]+0.12
} else {
MPF.BCT.BIAS.p[ ] <- MPF.BCT.BIAS.month[row, ] / MPF.BCT.sum / 10 * 7
MPF.BCT.BIAS.p[11] <- MPF.BCT.BIAS.p[11]+0.3
}
} else {
MPF.BCT.BIAS.p[ ] <- MPF.BCT.BIAS.month[row, ] / MPF.BCT.sum
}
# Change Global Equity fund to World Equity Tracking fund
if (MPF.BCT.BIAS.p[12] != 0 && monthly[row] > "2012-08-31") {
MPF.BCT.BIAS.p[13] <- MPF.BCT.BIAS.p[13] + MPF.BCT.BIAS.p[12]
MPF.BCT.BIAS.p[12] <- 0
}
# Change Hong Kong & Chinese Equity to portfolio
if (MPF.BCT.BIAS.p[3] != 0 && monthly[row] > "2012-08-31") {
MPF.BCT.BIAS.p[19] <- MPF.BCT.BIAS.p[19] + (MPF.BCT.BIAS.p[3] / 3)
MPF.BCT.BIAS.p[15] <- MPF.BCT.BIAS.p[15] + (MPF.BCT.BIAS.p[3] / 3)
MPF.BCT.BIAS.p[4] <- MPF.BCT.BIAS.p[4] + (MPF.BCT.BIAS.p[3] / 3)
MPF.BCT.BIAS.p[3] <- 0
# Change Hong Kong & Chinese Equity to Fidelity Save Easy 2040 & HSIT
} else if (MPF.BCT.BIAS.p[3] != 0 && monthly[row] > "2008-11-30") {
MPF.BCT.BIAS.p[19] <- MPF.BCT.BIAS.p[19] + (MPF.BCT.BIAS.p[3] / 2)
MPF.BCT.BIAS.p[15] <- MPF.BCT.BIAS.p[15] + (MPF.BCT.BIAS.p[3] / 2)
MPF.BCT.BIAS.p[3] <- 0
}
MPF.portf.weight[row,] <-
round_percent(MPF.BCT.BIAS.p)
portf.rebal.fm <-
Return.portfolio(
na.fill(MPF.BCT.returns, 0),
weight = MPF.portf.weight[1:row,],
geometric = TRUE,
rebalance_on = "months"
)
MPF.portf.return[row] <-
tail(na.omit(portf.rebal.fm), 1)
MPF.portf.drawdown <- Drawdowns(MPF.portf.return,
geometric = TRUE)
if (tail(na.omit(MPF.portf.drawdown), 1) < -0.065 && up == FALSE) {
hedge = TRUE
}
}
portf.rebal.fm <- Return.portfolio(
MPF.BCT.returns,
weight = MPF.portf.weight,
geometric = TRUE,
rebalance_on = "months"
)
mean.annual.return <-
mean(do.call(rbind, lapply(split(portf.rebal.fm, "years"), function(x)
colMeans(x))) * 12)
charts.PerformanceSummary(
portf.rebal.fm,
methods = "ModifiedES",
geometric = TRUE,
p = .95,
main = "BCT MPF Scheme First Contribution Performance"
)
Return.cumulative(portf.rebal.fm, geometric=TRUE)
portf.rebal.fm.sharpe <- Return.annualized(portf.rebal.fm, geometric=TRUE) / (StdDev.annualized(portf.rebal.fm))
rownames(portf.rebal.fm.sharpe) <- "Sharpe Ratio"
Return.annualized(portf.rebal.fm, geometric=TRUE)
mean.annual.return
portf.rebal.fm.sharpe
portf.rebal.fm.sharpe.mean <- mean.annual.return / (StdDev.annualized(portf.rebal.fm))
rownames(portf.rebal.fm.sharpe.mean) <- "Sharpe Ratio (Mean annual return)"
portf.rebal.fm.sharpe.mean
StdDev.annualized(portf.rebal.fm)
SortinoRatio(portf.rebal.fm)
ES(portf.rebal.fm, method="historical")
tail(MPF.portf.weight, n=6)
MPF.BCT.units <- MPF.BCT.returns
MPF.BCT.units[, ] <- 0
MPF.monthly.asset <- MPF.BCT.returns
MPF.monthly.asset[, ] <- 0
MPF.monthly.returns <-
as.xts(rowSums(MPF.BCT.returns), order.by = monthly)
MPF.monthly.returns[] <- 0
MPF.time <- 0:length(MPF.BCT.returns[, 1]) / 12
MPF.pay <- -1500 + 0 * MPF.time
for (row in 1:length(MPF.BCT.returns[, 1])) {
this.price <- as.matrix(MPF.BCT[monthly[row]])
MPF.BCT.units[row, ] <- this.price
if (row == 1) {
last.value <- 1500
this.value <- as.numeric((1500 / MPF.BCT[1, 16]) * this.price[16])
MPF.monthly.returns[row] <- log(this.value / last.value)
MPF.monthly.asset[row,] <-
(this.value + 1500) / this.price * MPF.portf.weight[row, ]
last.price <- this.price
} else {
last.value <-
as.numeric(sum(na.fill(last.price * MPF.monthly.asset[row - 1, ], 0)))
this.value <-
as.numeric(sum(na.fill(this.price * MPF.monthly.asset[row - 1, ], 0)))
MPF.monthly.returns[row] <- log(this.value / last.value)
MPF.monthly.asset[row,] <-
(this.value + 1500) / this.price * MPF.portf.weight[row, ]
last.price <- this.price
}
}
total.asset.value <- sum(MPF.monthly.asset[row, ] * this.price)
total.contribution <- 1500 * length(MPF.BCT.returns[, 1])
MPF.pay[row + 1] <- total.asset.value
IRR.f <- function(r)
sum(MPF.pay * exp(-r * MPF.time))
IRR.root <- uniroot(IRR.f, c(0, 1))
total.asset.value
total.contribution
mean.monthly.annual.return <-
mean(do.call(rbind, lapply(split(MPF.monthly.returns, "years"), function(x)
colMeans(x))) * 12)
mean.monthly.annual.return
IRR.root$root
stddev.monthly <- (StdDev(MPF.monthly.returns) * sqrt(12))
monthly.installment.sharpe.ratio <-
mean.monthly.annual.return / stddev.monthly
rownames(monthly.installment.sharpe.ratio) <-
"Sharpe Ratio (mean annual return)"
StdDev.annualized(MPF.monthly.returns)
monthly.installment.sharpe.ratio
SortinoRatio(MPF.monthly.returns)
ES(MPF.monthly.returns, method = "historical")
MPF.monthly.returns
